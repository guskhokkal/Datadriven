import pandas as pd
import spacy
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import NMF
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk

# laddar in en svensk Language Model
nlp = spacy.load("sv_core_news_sm")

# laddar in den städade filen med datasetet
data = pd.read_csv("C:\\Users\\alexa\\Desktop\\Cleaned_file.csv")

# Våra stopwords
custom_stopwords = ['västra', 'timma', 'södra', 'säs', 'sahlgrenska', 'norra', 'östra', 'högsbo', 'frölunda', 'alingsås', 'vuxenpsykatri', 'iii', 'uddevalla', 'lokala', 'akademisk', 'vuxenpsykiatriska', 'psykiatrisk', 'nationell', 'listade', 'digitala', 'representativt', 'psykiatriska', 'frisk', 'klinik', 'extern', 'egna', 'livsviktiga', 'svensk', 'laboratoriemedicinska', 'femårigt', 'tidsbegränsat', 'högsta', 'focus', 'fullt', 'adekvat', 'neuropsykiatriska', 'specialistpsykiatrisk', 'kritiska', 'motsvarande', 'teknsik', 'hela', 'övrigt', 'kompetenta', 'nya', 'hållbara', 'menningsfulla', 'nytt', 'kända', 'vikitgaste', 'största', 'delat', 'lediga', 'kortare', 'bredd', 'uppsatta', 'medarbetare', 'legitimerad', 'särskilda', 'rikt', 'sökande', 'ytterligare', 'speciella', 'offentligt', 'vigtigaste', 'bästa', 'bred', 'mariestad', 'utannonserade', 'upphandlade', 'annons', 'övriga', 'underställd', 'unga']

# skapar en funktion med stoppord , filtrerar ut stopporden och "ickeadjektiv" baserat på Pattern of Speech (pos)
def filter_stopwords(text):
    doc = nlp(text)
    filtered_words = [
        (token.text.lower(), token.pos_, token.tag_)
        for token in doc
        if not token.is_stop
        and token.pos_ == 'ADJ'
        and token.text.lower() not in custom_stopwords
    ]
    return filtered_words

# tokenizea texten (dvs skapa lista med varje ord för sig) i "descriptiontext kolumnen och ta bort våra stopwords"
data['tokenized_text'] = data['description.text'].apply(lambda x: filter_stopwords(x))

#lägg in texten i en lista
all_tokens = [word for sublist in data['tokenized_text'] for word in sublist]

#skapa en function för att tokenize:a texten
def custom_tokenizer(text):
    doc = nlp(text)
    filtered_tokens = [token.text.lower() for token in doc if not token.is_stop and token.pos_ == 'ADJ']
    return filtered_tokens

vectorizer = TfidfVectorizer(tokenizer=custom_tokenizer, stop_words=custom_stopwords)

dtm = vectorizer.fit_transform(data['description.text'])

# hur många topics man vill ha
num_topics = 5

# skapa en nmf model
nmf_model = NMF(n_components=num_topics, random_state=42)
nmf_model.fit(dtm)

# Få top orden
feature_names = vectorizer.get_feature_names_out()
topics = []

for topic_idx, topic in enumerate(nmf_model.components_):
    top_words_idx = topic.argsort()[:-11:-1]
    top_words = [feature_names[i] for i in top_words_idx]
    topics.append({
        'label': f"Topic {topic_idx + 1}",
        'words': top_words
    })

# Skapa en function som hanterar knappar
def show_topic_details(topic, button):
    # Get user input using a popup window
    user_input = messagebox.askquestion(
        "User Input",
          f"What is your question for {topic['label']}?\nTop words: {', '.join(topic['words'])}",
          icon="question",
          bg="lightblue",
          font=("Arial", 12)
    )
    
    print(f"Question for {topic['label']}: {user_input}")
    
    # Förstöra sumbit knappen
    button.destroy()

# Skapa Tkinter fönster
window = tk.Tk()
window.configure(bg="light blue")

#ladda in foto
image= Image.open("C:\\Users\\alexa\\Desktop\\NMF.jpg")
image = image.resize((200, 200))
photo = ImageTk.PhotoImage(image)

# Skapa en canvas 
canvas_width = window.winfo_screenwidth() 
canvas = tk.Canvas(window, width=canvas_width)
canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)  

# Skapa scrollbar 
scrollbar = tk.Scrollbar(window, command=canvas.yview)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

# Konfigurera canvasen
canvas.config(yscrollcommand=scrollbar.set)
canvas.bind('<Configure>', lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
canvas.bind_all("<MouseWheel>", lambda event: canvas.yview_scroll(-1 * (event.delta // 120), "units"))

# Skapa en frame för att innehålla topic sectionen
topics_frame = tk.Frame(canvas, bg="light blue")
canvas.create_window((canvas_width // 2, 200), window=topics_frame, anchor='n', width=canvas_width)

# Skapa rubrik
headline_label = tk.Label(topics_frame, text="Skapa en enkät", font=("Arial Bold", 36), bg="light blue", fg="black")
headline_label.pack()

photo_label = tk.Label(topics_frame, image=photo, bg="light blue")
photo_label.pack()

# Skapa permanent text 
permanent_text = """Dessa topics är genererade från arbetsannonser för chefer inom hälsa-och-omvårdnad inom VGR.
Med dessa ord skapa en enkät för att medarbetare ska utvärdera sina chefer baserat på det som sökts i arbetsannonser.
Frågorna elle påståended ska kunna besvaras på en skala mellan 1 och 5.

Mest använda ord: Stark, snäll, omhändetagande, utvecklande, bemötande""" 
exempel_text = """Exempel på fråga/påstående: Min chef arbetar aktivt för en bra arbetsmiljö.
"""
permanent_label_1 = tk.Label(topics_frame, text=permanent_text, justify="center", anchor="center", font=("Arial", 16), bg="light blue", fg="black")
permanent_label_1.pack()

permanent_label_2 = tk.Label(topics_frame, text=exempel_text, justify="center", anchor="center", font=("Arial", 16, "italic"), bg="white", fg="black")
permanent_label_2.pack()

# Skapa en tom lista för att lagra användarinput  
user_input = []

# Iterate över ämnen och skapa frames 
for topic_idx, topic in enumerate(topics):
    # Skapa en ram för det aktuella ämnet  
    topic_frame = tk.Frame(topics_frame, bg="light blue")
    topic_frame.pack(side=tk.TOP, pady=10, anchor='w')

    # Skapa etikett för ämnet
    topic_label = tk.Label(topic_frame, text="Kategori (Topics)", font=("Arial", 15), bg="light blue", fg="black")
    topic_label.pack(anchor='w')

    # Skapa etikett för the vanligaste orden  
    words_label = tk.Label(topic_frame, text=f"Mest använda ord inom kategorin: {', '.join(topic['words'])}", font=("Arial", 13), bg="light blue", fg="black")
    words_label.pack(anchor='w')

    # Skapa frågeetiketten för ämnet   
    question_label = tk.Label(topic_frame, text="Fråga:", font=("Arial", 13), bg= "light blue", fg="black")
    question_label.pack(anchor='w')

    # Skapa en inputbox för frågan
    question_entry = tk.Entry(topic_frame, bg="white", width=100)
    question_entry.pack(anchor='w')

    # Spara användarinputen i listan 
    user_input.append(question_entry)

# Konfigurera scrollbaren
scrollbar.config(command=canvas.yview)


def submit():
    # Få tillgång till användarinputen från listan
    responses = []
    for entry in user_input:
        value = entry.get()
        responses.append(value)

    window_width = window.winfo_width()
    window_height = window.winfo_height()

    # Stäng original fönstret 
    window.destroy()

    # Öppna ett nytt fönster (Toplevel) för att visa enkätresultatet 
    result_window = tk.Tk()
    result_window.geometry(f"{window_width}x{window_height}") 
    result_window.configure(bg="light blue")

    # Skapa en frame för att den ska innehålla enkätresultaten  
    results_frame = tk.Frame(result_window, bg="light blue")
    results_frame.pack()

    var_lists = []                          #ny    
    # Visa enkätresultaten 
    for idx, response in enumerate(responses):
        # Skapa en etikett för varje svar 
        question_frame = tk.Frame(results_frame, bg="light blue")
        question_frame.pack(pady=(10, 0))  # Add vertical spacing between questions

        question_label = tk.Label(question_frame, text=f"Fråga {idx+1}: {response}", font= ("Arial", 15), bg="light blue", fg="black")
        question_label.pack()

        tk.Label(question_frame, text="", bg="light blue").pack()

        options_frame = tk.Frame(question_frame, bg="light blue")
        options_frame.pack()

        var_list = []
        var = tk.IntVar()    

        # En function för att hantera de 6 frågorna från user input
        def toggle_selection(selection, idx=idx):  # Pass the idx parameter to the function
            var_lists[idx][idx].set(selection)  

        # skapa klickbara alternativ mellan 1 och 5 per fråga
        for i in range(5): 
            var_list.append(var)  # Lägg till variablerna i listan ovan

            frame = tk.Frame(options_frame, bg="light blue")
            frame.pack(side=tk.LEFT, padx=5)

            label = tk.Label(
                frame,
                text=str(i + 1),  # Visa upp alternativen 
                font=("Arial", 15),
                bg="light blue"
            )
            label.pack(side=tk.TOP)

            button = tk.Radiobutton(
                frame,
                variable=var_list[i],  
                value=i,
                command=lambda i=i: toggle_selection(i),
                bg="light blue",
                font=("Arial", 15),
                compound="left",
                height=2,
                width=2
            )
            button.pack(side=tk.LEFT, padx=5)
        var_lists.append(var_list)   #ny

    # Skapa en submit-knapp 
    def close_window():
        result_window.destroy()

    submit_button = tk.Button(results_frame, text="Skicka in", command=close_window, font=("Arial", 12))
    submit_button.pack()

    print (var_list)
    # Starta ett fönster för resultatet av de första (dvs det som de anställa möter)
    result_window.mainloop()
# skapa en submit knapp
submit_button = tk.Button(window, text="Skicka in", command=submit)
submit_button.pack(side=tk.BOTTOM)


# Starta Tkniter event loopen 
window.mainloop()
