import pandas as pd
import spacy
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import NMF
import tkinter as tk
from tkinter import messagebox

# laddar in en svensk Language Model
nlp = spacy.load("sv_core_news_sm")


# laddar in den städade filen med datasetet
data = pd.read_csv("C:\\Users\\alexa\\Desktop\\Cleaned_file.csv")


custom_stopwords = ['västra', 'timma', 'södra', 'säs', 'sahlgrenska', 'norra', 'östra', 'högsbo', 'frölunda', 'alingsås', 'vuxenpsykatri', 'iii', 'uddevalla', 'lokala', 'akademisk', 'vuxenpsykiatriska', 'psykiatrisk', 'nationell', 'listade', 'digitala', 'representativt', 'psykiatriska', 'frisk', 'klinik', 'extern', 'egna', 'livsviktiga', 'svensk', 'laboratoriemedicinska', 'femårigt', ]

# skapar en funktion med stoppord , filtrerar ut stopporden och "ickeadjektiv" baserat på Pattern of Speech (pos)
def filter_stopwords(text):
    doc = nlp(text)
    filtered_words = [
        (token.text.lower(), token.pos_, token.tag_)
        for token in doc
        if not token.is_stop
        and token.pos_ == 'ADJ'
        and token.text.lower() not in custom_stopwords
    ]
    return filtered_words


data['tokenized_text'] = data['description.text'].apply(lambda x: filter_stopwords(x))


all_tokens = [word for sublist in data['tokenized_text'] for word in sublist]


def custom_tokenizer(text):
    doc = nlp(text)
    filtered_tokens = [token.text.lower() for token in doc if not token.is_stop and token.pos_ == 'ADJ']
    return filtered_tokens


vectorizer = TfidfVectorizer(tokenizer=custom_tokenizer, stop_words=custom_stopwords)


dtm = vectorizer.fit_transform(data['description.text'])


num_topics = 6


nmf_model = NMF(n_components=num_topics, random_state=42)
nmf_model.fit(dtm)


feature_names = vectorizer.get_feature_names_out()
topics = []

for topic_idx, topic in enumerate(nmf_model.components_):
    top_words_idx = topic.argsort()[:-11:-1]
    top_words = [feature_names[i] for i in top_words_idx]
    topics.append({
        'label': f"Topic {topic_idx + 1}",
        'words': top_words
    })


def show_topic_details(topic, button):
    # Get user input using a popup window
    user_input = messagebox.askquestion("User Input", f"What is your question for {topic['label']}?\nTop words: {', '.join(topic['words'])}")
    
    print(f"Question for {topic['label']}: {user_input}")
    
    # Destroy the "Show Details" button
    button.destroy()

# Skapa Tkinter fönster 
window = tk.Tk() 

# Skapa en canvas 
canvas = tk.Canvas(window) 
canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True) 

 
# Skapa scrollbar 

scrollbar = tk.Scrollbar(window, command=canvas.yview) 
scrollbar.pack(side=tk.RIGHT, fill=tk.Y) 
 

# Konfigurera canvasen

canvas.config(yscrollcommand=scrollbar.set) 
canvas.bind('<Configure>', lambda e: canvas.configure(scrollregion=canvas.bbox("all"))) 
canvas.bind_all("<MouseWheel>", lambda event: canvas.yview_scroll(-1 * (event.delta // 120), "units")) 
 

# Skapa en frame för att innehålla topic sectionen

topics_frame = tk.Frame(canvas) 
canvas.create_window((0, 0), window=topics_frame, anchor='nw') 


# Skapa rubriker

headline_label = tk.Label(topics_frame, text="Skapa en enkät") 

headline_label.pack() 
 
 

# Skapa permanent text 

permanent_text = """Dessa topics är genererade från arbetsannonser för chefer inom hälsa-och-omvårdnad inom VGR. 

Med dessa ord skapa en enkät för att medarbetare ska utvärdera sina chefer baserat på det som sökts""" 

permanent_label = tk.Label(topics_frame, text=permanent_text, justify="center", anchor="center") 

permanent_label.pack() 
 

# Skapa en tom lista för att lagra användarinput  

user_input = [] 

 
 

# Iterate över ämnen och skapa frames 

for topic_idx, topic in enumerate(topics): 

    # Skapa en ram för det aktuella ämnet  

    topic_frame = tk.Frame(topics_frame) 

    topic_frame.pack(side=tk.TOP, pady=10) 

 
 

    # Skapa etikett för ämnet 

    topic_label = tk.Label(topic_frame, text=topic['label']) 

    topic_label.pack() 

 
 

    # Skapa etikett för the vanligaste orden  

    words_label = tk.Label(topic_frame, text=f"Top words: {', '.join(topic['words'])}") 

    words_label.pack() 

 

    # Skapa frågeetiketten för ämnet   

    question_label = tk.Label(topic_frame, text="Question:") 

    question_label.pack() 

 

    # Skapa en inputbox för frågan  

    question_entry = tk.Entry(topic_frame) 

    question_entry.pack() 

 
 

    # Spara användarinputen i listan 

    user_input.append(question_entry) 

 
 

# Konfigurera scrollbaren 

scrollbar.config(command=canvas.yview) 

 
 

def submit(): 

    # Få tillgång till användarinputen från listan  

    responses = [] 

    for entry in user_input: 

        value = entry.get() 

        responses.append(value) 

 

    # Stäng original fönstret  

    window.destroy() 

 
 

    # Öppna ett nytt fönster (Toplevel) för att visa enkätresultatet 

    result_window = tk.Toplevel() 

 
 

    # Skapa en frame för att den ska innehålla enkätresultaten  

    results_frame = tk.Frame(result_window) 

    results_frame.pack() 


    # Visa enkätresultaten  

    for idx, response in enumerate(responses): 

        # Skapa en etikett för varje svar  

        response_label = tk.Label(results_frame, text=f"Question {idx+1}: {response}") 

        response_label.pack() 

 

    # Stäng av submit-knappen för att motverka flera klick på knappen  

    submit_button.config(state=tk.DISABLED) 

 
 

# Skapa en submit-knapp 

submit_button = tk.Button(window, text="Submit", command=submit) 

submit_button.pack(side=tk.BOTTOM) 

# Boolean flagga för att kunna spåra om submit-knappen har använts  

submit_clicked = False 
 

# Starta Tkniter event loopen 

window.mainloop() 
